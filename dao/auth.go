// Code generated by sql2gorm. DO NOT EDIT.
package dao

import (
	"errors"
	"time"

	"github.com/jeffcail/gateway-web/public"

	"github.com/jeffcail/gateway-web/dto"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

// 管理员表
type GatewayAdmin struct {
	ID       int64     `gorm:"column:id;primary_key;AUTO_INCREMENT"`                // 主键id
	UserName string    `gorm:"column:user_name;NOT NULL"`                           // 用户名
	Salt     string    `gorm:"column:salt;NOT NULL"`                                // 加密盐值
	Password string    `gorm:"column:password;NOT NULL"`                            // 密码
	CreatedAt time.Time `gorm:"column:create_at;default:CURRENT_TIMESTAMP;NOT NULL"` // 添加时间
	UpdatedAt time.Time `gorm:"column:update_at;NOT NULL"`                           // 更新时间
	IsDelete int       `gorm:"column:is_delete;NOT NULL"`                           // 是否删除
}

func (m *GatewayAdmin) TableName() string {
	return "gateway_admin"
}

func (m *GatewayAdmin) CheckAdminLogin(c *gin.Context, tx *gorm.DB, param *dto.AdminLoginInput) (*GatewayAdmin, error) {
	admin, err := m.Find(c, tx, (&GatewayAdmin{UserName: param.UserName, IsDelete: 0}))
	if err != nil {
		return nil, errors.New("用户不存在")
	}
	slatPass := public.EncryptPassword(admin.Salt, param.Password)
	if admin.Password != slatPass {
		return nil, errors.New("密码错误")
	}
	return admin, nil
}

// Find
func (m *GatewayAdmin) Find(c *gin.Context, tx *gorm.DB, search *GatewayAdmin) (*GatewayAdmin, error) {
	admin := &GatewayAdmin{}
	err := tx.WithContext(c).Where(search).First(admin).Error
	if err != nil {
		return nil, err
	}
	return admin, nil
}

func (m *GatewayAdmin) SaveAdmin(c *gin.Context, tx *gorm.DB) error {
	return tx.WithContext(c).Save(m).Error
}
